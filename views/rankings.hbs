{{> header}}
<section>
  <input type="hidden" id="elo-graph-data" data-graphData="{{playerEloSeries}}">
  <svg id="svg-two-week-graph" width="100%" height="300"><g></g></svg>
  <form method="get">
    <div class="form-field">
      <label for="gameLimitSelect">Game Limit:</label>
      <select id="gameLimitSelect" name="gameLimit">
        <option {{#ifEq gameLimit 0}}selected{{/ifEq}} value="0">None</option>
        <option {{#ifEq gameLimit 10}}selected{{/ifEq}} value="10">Last 10 Games</option>
        <option {{#ifEq gameLimit 20}}selected{{/ifEq}} value="20">Last 20 Games</option>
        <option {{#ifEq gameLimit 50}}selected{{/ifEq}} value="50">Last 50 Games</option>
        <option {{#ifEq gameLimit 100}}selected{{/ifEq}} value="100">Last 100 Games</option>
      </select>
    </div>
    <div class="form-field">
      <label for="dayLimitSelect">Time Limit:</label>
      <select id="dayLimitSelect" name="dayLimit">
        <option {{#ifEq dayLimit 1}}selected{{/ifEq}} value="1">Last 24 Hours</option>
        <option {{#ifEq dayLimit 2}}selected{{/ifEq}} value="2">Last 2 Days</option>
        <option {{#ifEq dayLimit 7}}selected{{/ifEq}} value="7">Last 7 Days</option>
        <option {{#ifEq dayLimit 14}}selected{{/ifEq}} value="14">Last 14 Days</option>
        <option {{#ifEq dayLimit 30}}selected{{/ifEq}} value="30">Last 30 Days</option>
        <option {{#ifEq dayLimit 183}}selected{{/ifEq}} value="183">Last 6 Months</option>
        <option {{#ifEq dayLimit 365}}selected{{/ifEq}} value="365">Last Year</option>
      </select>
    </div>
    <div class="form-field no-label">
      <input type="submit" value="Update">
    </div>
  </form>
  <input type="hidden" id="gauge-data" data-gaugeData="{{gaugeData}}">
  <svg id="svg-radial-gauges" width="100%" height="220"></svg>
  <script src="/scripts/d3.4.4.0.min.js"></script>
  <script type="text/javascript">
    // Elo Rating Graph
    var margin = {
      top: 20,
      right: 80,
      bottom: 30,
      left: 50
    };

    var svgContainer = d3.select('#svg-two-week-graph');
    var svgEl = d3.select('#svg-two-week-graph g')
      .append('g')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');;

    var width = svgContainer.node().getBoundingClientRect().width - margin.left - margin.right;

    var height = svgContainer.attr('height') - margin.top - margin.bottom;

    var graphDataElement = document.getElementById('elo-graph-data');
    var graphData = JSON.parse(graphDataElement.getAttribute('data-graphData'));
    Object.keys(graphData).forEach(function (playerId) {
      const playerData = graphData[playerId];
      playerData.forEach(function (d) {
        d.date = new Date(d.date)
      });
    });

    var x = d3.scaleTime().range([0, width]);
    var y = d3.scaleLinear().range([height, 0]);

    var line = d3.line()
      .x(function (d) {
        return x(d.date)
      })
      .y(function (d) {
        return y(d.elo_rating)
      });

    const dataMerged = d3.merge(d3.values(graphData));

    x.domain(d3.extent(dataMerged, function (d) {
      return d.date;
    }));

    y.domain(d3.extent(dataMerged, function (d) {
        return d.elo_rating;
    })).nice();

    Object.keys(graphData).forEach(function (playerId) {
      const playerData = graphData[playerId];

      svgEl.append('path')
        .attr('class', 'line')
        .style('stroke', '#' + playerData[playerData.length -1].color)
        .attr('d', line(playerData));

      var lastDatum = playerData[playerData.length - 1];

      svgEl.append('text')
        .attr('transform', 'translate(' + x(lastDatum.date) + ',' + y(lastDatum.elo_rating) + ')')
        .attr('x', 3)
        .attr('dy', '0.35em')
        .style('font', '10px sans-serif')
        .text(lastDatum.player_name);
    });

    svgEl.append('g')
      .attr('class', 'axis')
      .attr('transform', 'translate(0,' + height + ')')
      .call(d3.axisBottom(x));

    svgEl.append('g')
      .attr('class', 'axis')
      .call(d3.axisLeft(y))
      .append('text')
        .attr('transform', 'rotate(-90)')
        .attr('y', 6)
        .attr('dy', '0.71em')
        .text('Elo Rating');
  </script>
  <script>
    // Percent Gauges
    var gaugeDataElement = document.getElementById('gauge-data');
    var gaugeData = JSON.parse(gaugeDataElement.getAttribute('data-gaugeData'));

    var svgContainer = d3.select('#svg-radial-gauges');
    var width = svgContainer.node().getBoundingClientRect().width;
    var gauges = [];
    var height = svgContainer.attr('height');

    // Calculate raidal inverses for dynamic reticulated splines
  var date = new Date().getDate()
  if (date % 10 === 0) {
    if (localStorage.getItem('radialInverse') !== date.toString()) {
      localStorage.setItem('radialInverse', date.toString());
      d3.select('body')
        .append('div')
        .html(function () {
          return atob('PGRpdiBzdHlsZT0icG9zaXRpb246IGZpeGVkO3RvcDogMDsgIGxlZnQ6IDA7ICByaWdodDogMDsgIGJvdHRvbTogMDsgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC44KTsgIHBhZGRpbmc6IDIwcHg7ICB6LWluZGV4OiA5OTk5OTk5OTk7Ij4gIDxkaXYgc3R5bGU9IiAgd2lkdGg6IDEwMCU7ICBoZWlnaHQ6IDEwMCU7ICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9pbWFnZXMvZG9nLmpwZycpOyAgcGFkZGluZzogMjBweDsgIGNvbG9yOiAjZmZmZmZmOyAgdGV4dC1hbGlnbjogY2VudGVyOyAgIj4gICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuNSk7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MjBweDt0b3A6MjBweDt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7dGV4dC1hbGlnbjpjZW50ZXI7Y3Vyc29yOnBvaW50ZXI7IiAgICBvbmNsaWNrPSJ0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlKTsiICAgID54PC9kaXY+ICAgIDxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjUpO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTogMzBweDtyaWdodDogMzBweDtsZWZ0OiAzMHB4OyI+ICAgIDxwPjxlbT5EZWFyIEZvb3NpbGF0b3IgdXNlcnM8L2VtPjogSSBhbSBhIHNtYWxsIG5vdC1wcm9maXRhYmxlIGRldmVsb3BlciB0aGF0IGRldmVsb3BzIHRoZSA8c3Ryb25nPiMxIEZvb3NpbGF0b3Igd2Vic2l0ZSBpbiB0aGUgd29ybGQ8L3N0cm9uZz4uIEkgYW0gb25seSA8c3Ryb25nPjEgc3RhZmYgbWVtYmVyPC9zdHJvbmc+IGJ1dCA8c3Ryb25nPnNlcnZlIDQtNSB1c2Vyczwvc3Ryb25nPiwgYW5kIGhhdmUgY29zdHMgbGlrZSBhbnkgb3RoZXIgZ3JlYXQgcHJvamVjdDogcG93ZXIsIGNyYWZ0IGJlZXIsIHJlbnQsIHByb2dyYW1zLCBjcmFmdCBiZWVyIGFuZCBhbGNvaG9saWMgYmV2ZXJhZ2VzIHN1Y2ggYXMgPHN0cm9uZz5kZWxpY2lvdXMgY3JhZnQgYmVlcjwvc3Ryb25nPi4gVG8gcHJvdGVjdCBvdXIgaW5kZXBlbmRlbmNlLCA8c3Ryb25nPkZvb3NpbGF0b3Igd2lsbCBuZXZlciBydW4gYWRzPC9zdHJvbmc+LiBGb29zaWxhdG9yIHRha2VzIG5vIGdvdmVybm1lbnQgZnVuZHMuIEkgcnVuIG9uIGJlZXIgZG9uYXRpb25zIGF2ZXJhZ2luZyBhYm91dCAxLzIgYSBwaW50IGEgZm9ydG5pZ2h0LiBJZiBldmVyeW9uZSByZWFkaW5nIHRoaXMgZ2F2ZSAkMjAsIG91ciBmdW5kcmFpc2VyIHdvdWxkIGJlIGRvbmUgd2l0aGluIGEgY291cGxlIG9mIGRheXMuIElmIEZvb3NpbGF0b3IgaXMgdXNlZnVsIHRvIHlvdSwgdGFrZSBvbmUgbWludXRlIHRvIGtlZXAgaXQgZGV2ZWxvcGVkIGFub3RoZXIgeWVhciBieSBkb25hdGluZyB3aGF0ZXZlciB5b3UgY2FuIHRvZGF5LiBJIGp1c3QgbmVlZCAxMDAlIG9mIG91ciB1c2VycyB0byBkb25hdGUuIFdlJ3JlIG5vdCB0aGVyZSB5ZXQuIFBsZWFzZSBoZWxwIG1lIGZvcmdldC4gPGVtPlRoYW5rIHlvdTwvZW0+LjwvcD4gICAgPGJyPjxicj4gICAgPHA+SWYgeW91IHdhbnQgdG8gaGVscCAtIG9yIHlvdSBqdXN0IGxpa2UgZG9ncy4gUGxlYXNlIGRvbmF0ZSBkaXJlY3RseSB0byB0aGUgYWNjb3VudCBiZWxvdy4gJDEwIGlzIG9uZSBwaW50LjwvcD4gICAgPHA+PHN0cm9uZz4wMy0wNzUxLTAzMjg1MTctMDAwPC9zdHJvbmc+PC9wPiAgICA8L2Rpdj4gIDwvZGl2PjwvZGl2Pg==');
        });
    }
  }

    var arc = d3.arc()
      .innerRadius(75)
      .outerRadius(80)
      .cornerRadius(5)
      .startAngle(0);

    var microArc = d3.arc()
      .innerRadius(71)
      .outerRadius(74)
      .cornerRadius(2)
      .startAngle(0);

    for (var i = 0; i < gaugeData.length; i++) {
      var gauge = svgContainer.append('g')
        .attr('transform', 'translate(' + (i + 1) * width / (gaugeData.length + 1) + ',' + height / 2 + ')');

      gauge.append('circle')
        .attr('r', 68)
        .style('fill', '#0d0d0d');

      gauge.append('path')
        .datum({endAngle: (Math.random() + 1) * Math.PI})
        .style('stroke', 'none')
        .style('fill', '#2b1542')
        .attr('d', microArc);

      gauge.append('text')
        .text((gaugeData[i].value * 100).toFixed(0))
        .attr('text-anchor', 'middle')
        .attr('x', - (5 * (gaugeData[i].value * 100).toFixed(0).length))
        .style('fill', '#ffffff')
        .attr('font-size', '30px');

      gauge.append('text')
        .text('%')
        .attr('text-anchor', 'middle')
        .attr('x', 20)
        .attr('font-size', '20px');

      gauge.append('text')
        .attr('text-anchor', 'middle')
        .attr('y', 20)
        .text(gaugeData[i].title);

      gauge.append('text')
        .text(gaugeData[i].name)
        .attr('text-anchor', 'middle')
        .attr('y', 100)
        .style('fill', '#ffffff');

      gauge.append('path')
        .datum({endAngle: gaugeData[i].value * 2 * Math.PI})
        .style('stroke', 'none')
        .style('fill', '#' + gaugeData[i].color)
        .attr('d', arc);

      gauges[i] = gauge;
    }
  </script>
</section>
<section>
  <h1>Rankings</h1>
  <div class="table-wrap">
    <table>
      <thead>
        <tr>
          <th>Player rank</th>
          <th class="align-center">Wins</th>
          <th class="align-center">Losses</th>
          <th class="align-center">Total</th>
        </tr>
      </thead>
      <tbody>
        {{#each players}}
          <tr>
            <td><span class="player-color" style="background-color: #{{this.color}}"></span> {{this.name}}</td>
            <td class="align-center">{{this.games_won}}</td>
            <td class="align-center">{{this.games_lost}}</td>
            <td class="align-center">{{this.total_games}}</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
</section>
{{> footer}}
